// pract 4.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
/*Ввести значение 2-х целых переменных a и b. Направить два
указателя на эти переменные. С помощью указателя увеличить
значение переменной a в 2 раза. Затем поменять местами
значения переменных a и b через их указатели.*/

/*
#include <iostream>		// для ввода-вывода (cin-cout)

// подключаем возможности стандартного пространства
using namespace std;

// главная функция программы (точка входа)
int main()
{
	// руссификация диалогов
	setlocale(LC_ALL, "Russian");

	// объявляем 2 целочисленные переменные
	int a, b;

	// вводим значение переменных с клавиатуры
	cout << "Введите 2 целых числа через пробел: ";
	cin >> a >> b;

	// выводим на экран входные значения переменных a и b
	cout << endl << "Входные значения" << endl;
	cout << "\t - значение переменной a: " << a << endl;
	cout << "\t - значение переменной b: " << b << endl;

	// направляем два указателя на эти переменные
	int* pa = &a;
	int* pb = &b;

	// с помощью направленных указателей
	int t = 0;
	int* pt = &t;

	// увеличиваем значение а в 2 раза
	*pa *= 2;

	//меняем местами значения переменных a и b через их указатели
	*pt = *pb;
	*pb = *pa;
	*pa = *pt;


	// выводим на экран измененные значения переменных a и b
	cout << endl << "Выходные значения" << endl;
	cout << "\t - значение переменной a: " << a << endl;
	cout << "\t - значение переменной b: " << b << endl;

	cout << endl << "Для завершения работы программы нажмите ENTER...";
	fflush(stdin);
	cin.get(); // задержка программы, чтобы у пользователя была возможность просмотреть результат
}
*/

/*Описать 2 указателя на целый тип. Выделить для них динамическую память.
Ввести значения в выделенную память с клавиатуры. Уменьшить в 2 раза 1-ую переменную.*/


/*#include <iostream>		// для ввода-вывода (cin-cout)

// подключаем возможности стандартного пространства
using namespace std;

// главная функция программы (точка входа)
int main()
{
	// руссификация диалогов
	setlocale(LC_ALL, "Russian");

	// объявляем 2 указателя на целый тип
	int* a, * b;

	// выделяем для них динамическую память
	a = new int;
	b = new int;

	// присваиваем произвольные значения в выделенные ячейки в операторе присвоения
	cout << "Введите значения a и b через пробел: " << endl;
	cin >> *a >> *b;

	// уменьшаем в 2 раза 1-ую переменную.
	*a /= 2;

	// выводим на экран значения переменных a и b
	cout << "\t - значение переменной a: " << *a << "\n\t - значение переменной b: " << *b << endl;


	// удаляем память из-под динамических переменных
	delete a;
	delete b;

	cout << endl << "Для завершения работы программы нажмите ENTER...";
	fflush(stdin);
	cin.get(); // задержка программы, чтобы у пользователя была возможность просмотреть результат
}
*/

/*Создать динамические массивы, используя указатели.
В каком из двух данных массивов p(n) и q(n) больше элементов, равных 1?*/
/*
#include <iostream>				// для ввода-вывода (cin-cout)

// подключаем возможности стандартного пространства
using namespace std;

// главная функция программы (точка входа)
int main()
{
	const int MAX_SIZE = 20; // максимально допустимое количество элементов в массиве r
	int n; // активное количество элементов массивов p и q
	int* p; // одномерный динамический целочисленный массив p(n)
	int* q;// одномерный динамический целочисленный массив q(n)
	// русификация диалогов программы
	setlocale(LC_ALL, "Russian");

	// запрашиваем от пользователя активное количество элементов массива p с проверкой на границы
	do
	{
		cout << "Введите количество элементов массива из отрезка [1 .. " << MAX_SIZE << "]: ";
		cin >> n;
	} while ((n < 1) || (n > MAX_SIZE));

	// выделяем память под динамические массивы p и q, состоящие из n элементов целого типа
	p = new int[n];
	q = new int[n];

	// запрашиваем от пользователя ввод значений элементов массива p с клавиатуры
	cout << endl << "Вам предстоит ввести с клавиатуры " << n << " элем. целого типа" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "\t - введите элемент p[" << (i + 1) << "]: ";
		cin >> p[i];
	}

	// запрашиваем от пользователя ввод значений элементов массива q с клавиатуры
	cout << endl << "Вам предстоит ввести с клавиатуры " << n << " элем. целого типа" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "\t - введите элемент q[" << (i + 1) << "]: ";
		cin >> q[i];
	}

	// выводим значения элементов массива p на экран в строку
	cout << endl << "Элементы исходного массива:\n";
	for (int i = 0; i < n; i++)
		cout << "\t" << p[i];

	// выводим значения элементов массива q на экран в строку
	cout << endl << "Элементы исходного массива:\n";
	for (int i = 0; i < n; i++)
		cout << "\t" << q[i];

	// начинается обработка: считаем количество 1 в массивах p и q
	int countP = 0, countQ = 0;
	for (int i = 0; i < n; i++)
		if (p[i] == 1) // если текущий элемент равен 1, то
			countP++; // добавляем к счетчику 1

	for (int i = 0; i < n; i++)
		if (q[i] == 1) // если текущий элемент равен 1, то
			countQ++; // добавляем к счетчику 1

	cout << endl;

	if (countP > countQ)
		cout << "В массиве p[n], больше единиц, чем в массиве q[n]";
	else if(countP == countQ)
		cout << "В массивах p[n] и q[n] одинаковое количество единиц";
	else
		cout << "В массиве q[n], больше единиц, чем в массиве p[n]";

	// удаляем динамическую память из-под элементов массива p
	delete[]p;

	// удаляем динамическую память из-под элементов массива q
	delete[]q;

	cout << endl << "\nДля завершения работы программы нажмите ENTER...";
	fflush(stdin);
	cin.get(); // задержка программы, чтобы у пользователя была возможность просмотреть результат
}
*/

/*Создать динамические массивы, используя указатели. Дан массив b(n).
Переписать в массив c(n) положительные элементы массива b(n), 
умноженные на 5 (со сжатием, без пустых элементов внутри).
Затем упорядочить методом «выбора и перестановки» по возрастанию новый массив.*/

#include <iostream>				// для ввода-вывода (cin-cout)

// подключаем возможности стандартного пространства
using namespace std;

// главная функция программы (точка входа)
int main()
{
	const int MAX_SIZE = 20; // максимально допустимое количество элементов в массивах
	int n; // активное количество элементов массива b(n)
	int m; // активное количество элементов массива c(m)
	int* b; // одномерный динамический целочисленный массив b(n)
	int* c; // одномерный динамический целочисленный массив c(m)

	// русификация диалогов программы
	setlocale(LC_ALL, "Russian");

	// запрашиваем от пользователя активное количество элементов массива b с проверкой на границы
	do
	{
		cout << "Введите количество элементов массива B(n) из отрезка [1 .. " << MAX_SIZE << "]: ";
		cin >> n;
	} while ((n < 1) || (n > MAX_SIZE));

	// выделяем память под динамический массив b, состоящий из n элементов целого типа
	b = new int[n];

	// запрашиваем от пользователя ввод значений элементов массива b(n) с клавиатуры
	cout << endl << "Вам предстоит ввести с клавиатуры " << n << " элем. целого типа" << endl;
	for (int i = 0; i < n; i++)
	{
		cout << "\t - введите элемент B[" << (i + 1) << "]: ";
		cin >> b[i];
	}

	// выводим значения элементов массива b на экран в строку
	cout << endl << "Элементы исходного массива X(n):\n";
	for (int i = 0; i < n; i++)
		cout << "\t" << b[i];

	// считаем количество элементов в массиве b, значение которых больше 0
	m = 0;
	for (int i = 0; i < n; i++)
		if (b[i] > 0) // если текущий элемент массива больше 0, то
			m++; // увеличиваем счетчик чисел, больших 0, на +1

			// выделяем память под динамический массив c(m)
	c = new int[m];

	// начинается обработка: переписываем элементы из массива b, большие 0, в массив c
	int k = -1; // индекс элементов в массиве c для вставки элемента из массива b
	for (int i = 0; i < n; i++)
		if (b[i] > 0) // если текущий элемент массива b больше 0, то
			c[++k] = b[i]; // переносим его в массив c

	// увеличиваем каждый элемент массива c в 5 раз
	for (int i = 0; i < m; i++)
		c[i] *= 5;

	if (!m)
		cout << endl << endl << "В массиве c нет ни одного элемента! Сортировка физически невозможна." << endl;
	else
	{
		// выводим полученный массив c(m) на экран
		cout << endl << "\nЭлементы массива С (до сортировки):\n";
		for (int i = 0; i < m; i++)
			cout << "\t" << c[i];

		// начинается сортировка массива c(m) методом выбора по возрастанию
		for (int i = 0; i < (m - 1); i++)
		{
			int index_min = i;
			for (int j = (i + 1); j < m; j++)
				if (c[j] < c[index_min])
					index_min = j;
			if (i != index_min)
			{
				int swap = c[i];
				c[i] = c[index_min];
				c[index_min] = swap;
			}
		}

		// выводим отсортированный массив c(m) на экран
		cout << endl << "\nЭлементы массива С (после сортировки):\n";
		for (int i = 0; i < m; i++)
			cout << "\t" << c[i];
	}

	// удаляем динамическую память из-под элементов массивов b, c
	delete[]b;
	delete[]c;

	cout << endl << "\nДля завершения работы программы нажмите ENTER...";
	fflush(stdin);
	cin.get(); // задержка программы, чтобы у пользователя была возможность просмотреть результат
}
